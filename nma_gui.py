from flask import Flask, render_template, request, flash, redirect, url_for, session
from static_analyser import FilePusher, RemoteStaticMalwareAnalyser
from pprint import pprint
from werkzeug.utils import secure_filename
import os
import pymongo
import datetime
from celery import Celery
from celery.contrib import rdb

REMNUX_SERVER = '192.168.239.137'
MALWARE_DIRECTORY = '/home/remnux/Downloads/'
REMNUX_USER = 'remnux'
REMNUX_PASSWORD = 'malware'
UPLOAD_FOLDER = '/home/haxorelite/Downloads'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'pcap', 'exe'}

app = Flask(__name__)
app.secret_key = "super secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['CELERY_BROKER_URL'] = 'redis://localhost:6379/0'
app.config['CELERY_RESULT_BACKEND'] = 'redis://localhost:6379/0'
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["network_malware_analysis"]
mycol = mydb["analysis_results"]

celery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])
celery.conf.update(app.config)


@app.route('/')
@app.route('/home')
def index():
    # TODO: code needed to perform a search and return results - might need a new search results route and page
    scan_results = []
    for result in mycol.find().sort("time_analysed", -1).limit(20):
        scan_results.append(result)
    return render_template('home_base.html', page_title="Home", scan_results=scan_results), 404


@app.route('/scan_results/<id_hash>')
def scan_results(id_hash):
    scan_result = {}
    for result in mycol.find({"_id": id_hash}):
        scan_result = result
    num_strings = len(scan_result.get('static').get('strings'))
    num_imports = 0
    try:
        for key, value in scan_result.get('static').get('imports').items():
            num_imports += len(value)
    except AttributeError:
        print("There are no Imports in this file.")
    try:
        languages = " + ".join(scan_result.get('static').get('languages'))
    except:
        print("No languages returned!")
        languages = "No languages found!"
    try:
        hashes = scan_result.get('static').get('hashes')
        if hashes is None:
            hashes = {}
    except:
        print("No hashes found")
        hashes = {}
    try:
        imports = scan_result.get('static').get('imports')
        if imports is None:
            imports = {}
    except:
        print("No imports found!")
        imports = {}
    return render_template('results_base.html', page_title="Scan Results", scan_result=scan_result,
                           num_strings=num_strings, num_imports=num_imports, languages=languages, hashes=hashes,
                           imports=imports), 404


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@celery.task
def analyse_file_statically(file_path):
    file_name = os.path.basename(file_path)
    _, file_extension = os.path.splitext(file_name)

    file_pusher = FilePusher(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    file_pusher.push_file(file_path, MALWARE_DIRECTORY)

    static_analyser = RemoteStaticMalwareAnalyser(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    now = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
    if file_extension == ".exe":
        analysis_output = static_analyser.analyse_exe_file(file_name)
    if file_extension == ".pdf":
        pass
    first_key = next(iter(analysis_output))
    # Insert value if it does not already exist, otherwise update it with the latest scan results
    x = mycol.update_one({"_id": first_key},
                         {"$set": {"time_analysed": now, "pcap": file_name, "static": analysis_output[first_key]}},
                         upsert=True)

    return analysis_output


@app.route('/submit_pcap', methods=['GET', 'POST'])
def submit_pcap():
    # Code to upload a file
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part!')
            return redirect(request.url)
        file = request.files['file']
        # If the user does not select a file, the browser submits an empty file without a filename.
        if file.filename == '':
            flash('No selected file!')
            return redirect(request.url)
        # If file is not in the allowed list
        if not allowed_file(file.filename):
            flash('File type not allowed!')
            return redirect(request.url)
        # If file has been selected and it is allowed then save it and submit it for analysis
        # TODO: need to now changed this from uploading a file to uploading a PCAP
        # TODO: need to add functionality to kick off zeek to extract files from PCAP for analysis
        if file and allowed_file(file.filename):
            submitted_filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], submitted_filename))
            # TODO: insert code to trigger zeek to parse the PCAP and find the files for analysis
            # TODO: use Celery background task to get file to analyse in the background and allow the route to continue: https://flask.palletsprojects.com/en/1.1.x/patterns/celery/
            analyse_file_statically.delay(
                app.config['UPLOAD_FOLDER'] + f"/{submitted_filename}")  # this is the one to run with asynchronously
            # analyse_file_statically(app.config['UPLOAD_FOLDER'] + f"/{submitted_filename}") # this can eventually be removed - it's the code which doesn't use celery

            return redirect(url_for('pcap_submitted', submitted_filename=submitted_filename))
    return render_template('submit_pcap.html', page_title="Submit PCAP"), 404


@app.route('/pcap_submitted')
def pcap_submitted():
    submitted_filename = request.args.get('submitted_filename')
    # TODO: add HTML with link to the scan results of the PCAP - there may be multitple files so will need to handle this
    return render_template('pcap_submitted.html', page_title="PCAP Submitted",
                           submitted_filename=submitted_filename), 404


@app.route('/no_search_results')
def no_search_results():
    return render_template('no_search_results.html', page_title="No Results"), 404


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True)
