from flask import Flask, render_template, request, flash, redirect, url_for, session
from static_analyser import FilePusher, RemoteStaticMalwareAnalyser
from pprint import pprint
from werkzeug.utils import secure_filename
import os

REMNUX_SERVER = '192.168.239.137'
MALWARE_DIRECTORY = '/home/remnux/Downloads/'
REMNUX_USER = 'remnux'
REMNUX_PASSWORD = 'malware'
UPLOAD_FOLDER = '/home/haxorelite/Downloads'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'pcap', 'exe'}

app = Flask(__name__)
app.secret_key = "super secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


# TODO: Use dynamic routing with the file hash value to pull relevant information for that file

@app.route('/')
@app.route('/home')
def index():
    # TODO: insert code to read the analysis results from the database - all recent ones
    # TODO: need to write code that will accept a search for a file and return scan results page
    return render_template('home_base.html', page_title="Home"), 404


@app.route('/scan_results')
def scan_results():
    # TODO: insert code to read the analysis results from the database - from a search or a recent scan or from selecting one from the home page
    return render_template('results_base.html', page_title="Scan Results"), 404


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def analyse_file_statically(file_path):
    exe_file_name = os.path.basename(file_path)
    # TODO: need code to check if hash for analysis exists in the database already
    file_pusher = FilePusher(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    file_pusher.push_file(file_path, MALWARE_DIRECTORY)

    static_analyser = RemoteStaticMalwareAnalyser(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    analysis_output = static_analyser.analyse_exe_file(exe_file_name)
    print(analysis_output)
    return analysis_output


@app.route('/submit_pcap', methods=['GET', 'POST'])
def submit_pcap():
    # Code to upload a file
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part!')
            return redirect(request.url)
        file = request.files['file']
        # If the user does not select a file, the browser submits an empty file without a filename.
        if file.filename == '':
            flash('No selected file!')
            return redirect(request.url)
        # If file is not in the allowed list
        if not allowed_file(file.filename):
            flash('File type not allowed!')
            return redirect(request.url)
        # If file has been selected and it is allowed then save it and submit it for analysis
        # TODO: need to now changed this from uploading a file to uploading a PCAP
        # TODO: need to add functionality to kick off zeek to extract files from PCAP for analysis
        # TODO: get timestamp of upload so can capture that in the database to determine if a later scan is to supercede a previous one
        if file and allowed_file(file.filename):
            submitted_filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], submitted_filename))
            analyse_file_statically(app.config['UPLOAD_FOLDER'] + f"/{submitted_filename}")
            return redirect(url_for('pcap_submitted', submitted_filename=submitted_filename))

    # TODO: insert code to extract files, analyse them and then save the results in the database

    return render_template('submit_pcap.html', page_title="Submit PCAP"), 404


@app.route('/pcap_submitted')
def pcap_submitted():
    submitted_filename = request.args.get('submitted_filename')
    # TODO: add HTML with link to the scan results of the PCAP - there may be mulitple files so will need to handle this
    return render_template('pcap_submitted.html', page_title="PCAP Submitted",
                           submitted_filename=submitted_filename), 404


@app.route('/no_search_results')
def no_search_results():
    return render_template('no_search_results.html', page_title="No Results"), 404


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True)
