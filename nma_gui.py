from flask import Flask, render_template, request, flash, redirect, url_for, session
from static_analyser import FilePusher, RemoteStaticMalwareAnalyser
from pprint import pprint
from werkzeug.utils import secure_filename
import os
import pymongo
import datetime
from celery import Celery
from celery.contrib import rdb
import subprocess
import time
import glob
import shutil

REMNUX_SERVER = '192.168.239.137'
MALWARE_DIRECTORY = '/home/remnux/Downloads/'
REMNUX_USER = 'remnux'
REMNUX_PASSWORD = 'malware'
UPLOAD_FOLDER = '/home/sean/Downloads'
ALLOWED_EXTENSIONS = {'pcap'}

app = Flask(__name__)
app.secret_key = "super secret key"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['CELERY_BROKER_URL'] = 'redis://localhost:6379/0'
app.config['CELERY_RESULT_BACKEND'] = 'redis://localhost:6379/0'
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["network_malware_analysis"]
mycol = mydb["analysis_results"]

celery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])
celery.conf.update(app.config)


@app.route('/')
@app.route('/home')
def index():
    scan_results = []
    for result in mycol.find().sort("time_analysed", -1).limit(20):
        scan_results.append(result)
    return render_template('home_base.html', page_title="Home", scan_results=scan_results), 404


@app.route('/search_results', methods=['GET', 'POST'])
def search_results():
    search_string = request.args.get("search")
    search_result = ""
    query = {"$or": [{"_id": search_string}, {"pcap_file_name": search_string}]}
    result_count = mycol.count_documents(query)
    # result_count = mycol.count_documents({"_id": search_string})
    results = mycol.find(query)
    # results = mycol.find({"_id": search_string})
    if result_count:
        for result in results:
            search_result = result
    else:
        return render_template('no_search_results.html', page_title="Home", search_string=search_string), 404
    return render_template('search_base.html', page_title="Home", search_result=search_result,
                           search_string=search_string), 404


@app.route('/scan_results/<id_hash>')
def scan_results(id_hash):
    scan_result = {}
    for result in mycol.find({"_id": id_hash}):
        scan_result = result
    num_strings = len(scan_result.get('static').get('strings'))
    num_imports = 0
    try:
        for key, value in scan_result.get('static').get('imports').items():
            num_imports += len(value)
    except AttributeError:
        print("There are no Imports in this file.")
    try:
        languages = " + ".join(scan_result.get('static').get('languages'))
    except:
        print("No languages returned!")
        languages = "No languages found!"
    try:
        hashes = scan_result.get('static').get('hashes')
        if hashes is None:
            hashes = {}
    except:
        print("No hashes found")
        hashes = {}
    try:
        imports = scan_result.get('static').get('imports')
        if imports is None:
            imports = {}
    except:
        print("No imports found!")
        imports = {}
    return render_template('results_base.html', page_title="Scan Results", scan_result=scan_result,
                           num_strings=num_strings, num_imports=num_imports, languages=languages, hashes=hashes,
                           imports=imports), 404


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@celery.task
def scan_with_zeek(pcap_file_name):
    pcap_file_name = os.path.basename(pcap_file_name)
    starting_directory = os.getcwd()
    os.chdir(UPLOAD_FOLDER)
    process = subprocess.Popen(['/opt/zeek/bin/zeek', '-C', '-r', f"{UPLOAD_FOLDER}/{pcap_file_name}",
                                'file-extraction/plugins/extract-all-files'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    print(stdout, stderr)
    extraction_directory = f"{UPLOAD_FOLDER}/extract_files"
    os.chdir(extraction_directory)
    file_paths = []
    for filename in os.listdir(extraction_directory):
        f = os.path.join(extraction_directory, filename)
        # checking if it is an executable file
        if os.path.isfile(f) and f.endswith(".exe"):
            file_paths.append(f)
    os.chdir(starting_directory)
    return file_paths


@celery.task
def analyse_file_statically(file_path, pcap_file_name):
    file_name = os.path.basename(file_path)
    _, file_extension = os.path.splitext(file_name)

    file_pusher = FilePusher(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    file_pusher.push_file(file_path, MALWARE_DIRECTORY)

    static_analyser = RemoteStaticMalwareAnalyser(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    now = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S')
    if file_extension == ".exe":
        analysis_output = static_analyser.analyse_exe_file(file_name)
    if file_extension == ".pdf":
        pass
    first_key = next(iter(analysis_output))
    # Insert value if it does not already exist, otherwise update it with the latest scan results
    x = mycol.update_one({"_id": first_key},
                         {"$set": {"pcap_file_name": pcap_file_name, "time_analysed": now, "file_name": file_name,
                                   "static": analysis_output[first_key]}},
                         upsert=True)
    os.remove(file_path)
    return analysis_output


@celery.task
def __clear_analysis():
    print("Preparing to clear analysis directory...")
    exes_present = True
    extraction_directory = f"{UPLOAD_FOLDER}/extract_files"
    count = 0
    while exes_present and count < 10:
        count += 1
        for filename in os.listdir(extraction_directory):
            f = os.path.join(extraction_directory, filename)
            # checking if it is an executable file
            if os.path.isfile(f) and f.endswith(".exe"):
                exes_present = True
                print("Found an exe. How did that happen? Waiting 5 seconds to see if it get's analysed and removed.")
                time.sleep(5)
                break
            else:
                exes_present = False
    num_exes = len([name for name in os.listdir(extraction_directory) if
                    os.path.isfile(name) and os.path.join(extraction_directory, filename).endswith(".exe")])
    print(f"Clearing analysis directory! {num_exes} left!")

    for filename in os.listdir(UPLOAD_FOLDER):
        print(UPLOAD_FOLDER, filename)
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))


@app.route('/submit_pcap', methods=['GET', 'POST'])
def submit_pcap():
    # Code to upload a file
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part!')
            return redirect(request.url)
        file = request.files['file']
        # If the user does not select a file, the browser submits an empty file without a filename.
        if file.filename == '':
            flash('No selected file!')
            return redirect(request.url)
        # If file is not in the allowed list
        if not allowed_file(file.filename):
            flash('File type not allowed!')
            return redirect(request.url)
        # If file has been selected and it is allowed then save it and submit it for analysis and extract exes for scanning
        if file and allowed_file(file.filename):
            submitted_filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], submitted_filename))

            extracted_exes = scan_with_zeek(os.path.join(app.config['UPLOAD_FOLDER'], submitted_filename))
            print(extracted_exes)
            for x in range(0, 5):
                if os.path.isdir(os.path.join(app.config['UPLOAD_FOLDER'], "extract_files")):
                    break
                else:
                    time.sleep(5)
            for exe in extracted_exes:
                analyse_file_statically.delay(exe, submitted_filename)  # this is the one to run with asynchronously
            __clear_analysis.delay()
            return redirect(url_for('pcap_submitted', submitted_filename=submitted_filename))
    return render_template('submit_pcap.html', page_title="Submit PCAP"), 404


@app.route('/pcap_submitted')
def pcap_submitted():
    submitted_filename = request.args.get('submitted_filename')
    # TODO: add HTML with link to the scan results of the PCAP - there may be multitple files so will need to handle this
    return render_template('pcap_submitted.html', page_title="PCAP Submitted",
                           submitted_filename=submitted_filename), 404


@app.route('/no_search_results')
def no_search_results():
    return render_template('no_search_results.html', page_title="No Results"), 404


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True)
