import paramiko
import json
from pprint import pprint
import re
import csv
import os

REMNUX_SERVER = '192.168.239.137'
MALWARE_DIRECTORY = '/home/remnux/Downloads/'
REMNUX_USER = 'remnux'
REMNUX_PASSWORD = 'malware'


class FilePusher:
    """
    This Class provides functionality to push files to the remote static analysis machine for analysis.
    """

    def __init__(self, remote_server, remote_user, remote_password, malware_directory):
        """
        Class initialisation for FilePusher
        :param remote_server:
        :param remote_user:
        :param remote_password:
        :param malware_directory:
        """
        # Instantiating an SSH class
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Capturing parameters passed into instance variables
        self.remote_server = remote_server
        self.remote_user = remote_user
        self.remote_password = remote_password
        self.malware_directory = malware_directory

        self.ssh_client.connect(self.remote_server, username=self.remote_user, password=self.remote_password)
        self.ftp_client = self.ssh_client.open_sftp()

    def push_file(self, local_filepath, remote_directory):
        filename = os.path.basename(local_filepath)
        result = self.ftp_client.put(local_filepath, remote_directory + "/" + filename)
        self.ftp_client.close()
        return result


class RemoteStaticMalwareAnalyser:
    """
    This Class provides functionality to scan potentially malicious files remotely.
    """

    def __init__(self, remote_server, remote_user, remote_password, malware_directory):
        """
        Class initialisation for RemoteStaticMalwareAnalyser.
        :param remote_server:
        :param remote_user:
        :param remote_password:
        :param malware_directory:
        """

        # Instantiating an SSH class
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Capturing parameters passed into instance variables
        self.remote_server = remote_server
        self.remote_user = remote_user
        self.remote_password = remote_password
        self.malware_directory = malware_directory

    def __run_command(self, command):
        # ssh = paramiko.SSHClient()
        # ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.ssh_client.connect(self.remote_server, username=self.remote_user, password=self.remote_password)
        ssh_stdin, ssh_stdout, ssh_stderr = self.ssh_client.exec_command(command)

        # print("SSH successful. Closing connection")
        ssh_stdout = ssh_stdout.readlines()
        ssh_stderr = ssh_stderr.readlines()
        self.ssh_client.close()
        # print("Connection closed.")
        return "".join(ssh_stdout), "".join(ssh_stderr)

    def __analyse_exe(self, filename, analysis_type):
        exe_analysis = {
            "EXE_STRINGS": f"pedump {MALWARE_DIRECTORY}{filename} -s",
            "EXE_PACKER": f'pedump {MALWARE_DIRECTORY}{filename} -P | cut -d ":" -f2'.lstrip(),
            "EXE_MANALYZE": f'manalyze --pe {MALWARE_DIRECTORY}{filename} -o json -d all --hashes',
            "EXE_HASH": f'md5sum {MALWARE_DIRECTORY}{filename} | cut -d " " -f1'
        }

        # TODO: Put in exception handling here - if file doesn't exist then this will fail
        cmd_to_execute = exe_analysis[analysis_type]
        # print(cmd_to_execute)
        std_out, std_err = self.__run_command(cmd_to_execute)
        return std_out, std_err

    def __analyse_pdf(self, filename, analysis_type):
        # pdf_analysis = {
        #     "EXE_STRINGS": f"pedump {MALWARE_DIRECTORY}{filename} -s",
        #     "EXE_PACKER": f'pedump {MALWARE_DIRECTORY}{filename} -P | cut -d ":" -f2'.lstrip(),
        #     "EXE_MANALYZE": f'manalyze --pe {MALWARE_DIRECTORY}{filename} -o json -d all --hashes'
        # }

        # TODO: Put in exception handling here - if file doesn't exist then this will fail
        cmd_to_execute = pdf_analysis[analysis_type]
        std_out, std_err = self.__run_command(cmd_to_execute)
        return std_out, std_err

    def __get_exe_strings(self, filename):
        # TODO: Put in exception handling here - if file doesn't exist then this will fail

        std_out, std_err = self.__analyse_exe(filename, 'EXE_STRINGS')
        # print(std_out)
        csv_strings = re.sub("[^\S\r\n]+", ",", std_out.lstrip(',')).replace('===,STRINGS,===', '').split('\n')
        csv_strings = [line.lstrip(',') for line in csv_strings if line.strip() != '']
        reader = csv.reader(csv_strings)
        strings_list = [row[-1] for row in list(reader)][1:]
        # print(strings_list)
        if std_err and not std_out:
            return std_err
        else:
            return strings_list

    def __get_exe_packer(self, filename):
        std_out, std_err = self.__analyse_exe(filename, 'EXE_PACKER')
        if std_err:
            return std_err
        else:
            return std_out.strip()

    def __get_exe_manalyze(self, filename):
        std_out, std_err = self.__analyse_exe(filename, 'EXE_MANALYZE')
        if std_err:
            return std_err
        else:
            return json.loads(std_out)

    def __get_exe_hash(self, filename):
        std_out, std_err = self.__analyse_exe(filename, 'EXE_HASH')
        if std_err:
            return std_err
        else:
            return std_out.strip()

    def analyse_exe_file(self, filename):
        file_hash = self.__get_exe_hash(filename)
        strings = self.__get_exe_strings(filename)
        packer = self.__get_exe_packer(filename)
        file_analysis = {}
        file_analysis[file_hash] = {}
        manalyze_output = self.__get_exe_manalyze(filename)
        if not isinstance(manalyze_output, dict):
            file_analysis[file_hash]['packer'] = packer
            file_analysis[file_hash]['strings'] = strings
            manalyze_output = {"error": manalyze_output}
            file_analysis[file_hash]["error"] = manalyze_output["error"]
        else:
            # Capture output from the analysis tools into a dictionary for returning
            file_analysis[file_hash]['packer'] = packer
            file_analysis[file_hash]['strings'] = strings
            file_analysis[file_hash]['magic_number'] = manalyze_output.get(f'{self.malware_directory}{filename}',
                                                                           {}).get(
                'DOS Header', {}).get('e_magic')
            file_analysis[file_hash]['hashes'] = manalyze_output.get(f'{self.malware_directory}{filename}', {}).get(
                'Hashes')
            file_analysis[file_hash]['file_type'] = \
                manalyze_output.get(f'{self.malware_directory}{filename}', {}).get('Image Optional Header', {}).get(
                    'Magic')
            file_analysis[file_hash]['imports'] = manalyze_output.get(f'{self.malware_directory}{filename}', {}).get(
                'Imports')
            file_analysis[file_hash]['compile_date'] = manalyze_output.get(f'{self.malware_directory}{filename}',
                                                                           {}).get(
                'Summary', {}).get('Compilation Date')
            file_analysis[file_hash]['languages'] = manalyze_output.get(f'{self.malware_directory}{filename}', {}).get(
                'Summary', {}).get(
                'Detected languages')
            file_analysis[file_hash]['file_version'] = manalyze_output.get(f'{self.malware_directory}{filename}',
                                                                           {}).get(
                'Summary', {}).get('FileVersion')
            file_analysis[file_hash]['original_filename'] = \
                manalyze_output.get(f'{self.malware_directory}{filename}', {}).get('Summary', {}).get(
                    'OriginalFilename')
            file_analysis["error"] = ""

        return file_analysis


if __name__ == "__main__":
    exe_file_name = '374ef83de2b254c4970b830bb93a1dd79955945d24b824a0b35636e14355fe05.exe'

    file_pusher = FilePusher(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    file_pusher.push_file(exe_file_name, MALWARE_DIRECTORY)

    static_analyser = RemoteStaticMalwareAnalyser(REMNUX_SERVER, REMNUX_USER, REMNUX_PASSWORD, MALWARE_DIRECTORY)
    analysis_output = static_analyser.analyse_exe_file(exe_file_name)
    pprint(analysis_output)
